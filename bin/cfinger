#!/bin/bash
# shellcheck disable=SC2004,SC2059

#
##
### Environment and bash sanity.
##
#
set -u
set -e
set -o pipefail
umask 0027
memyselfandi=$(basename "${0}")
if [[ "${BASH_VERSINFO[0]}" -lt 4 ]]; then
  echo "Sorry, you need at least bash 4.x to use ${memyselfandi}." >&2
  exit 1
fi

#
##
### Functions.
##
#

function _Usage() {
    echo
    echo 'Usage:'
    echo "       ${memyselfandi}              Lists account info for the current user."
    echo "       ${memyselfandi} some-user    Lists account info for the specified user."
    echo
}

#
##
### Main.
##
#
basic_format="%-16s: %-s\n"
total_width=70 # minimum
terminal_width=$(tput cols)
if [[ "${terminal_width}" -gt "${total_width}" ]];then
    total_width="${terminal_width}"
fi
SEP_SINGLE_CHAR='-'
SEP_DOUBLE_CHAR='='
SEP_SINGLE=$(head -c "${total_width}" /dev/zero | tr '\0' "${SEP_SINGLE_CHAR}")
SEP_DOUBLE=$(head -c "${total_width}" /dev/zero | tr '\0' "${SEP_DOUBLE_CHAR}")

#
# Get user.
#
declare user=''
if [[ -z ${1:-} ]]; then
    #
    # Get the current user.
    #
    user="$(id -nu | tr -d '\n')"
else
    #
    # Check if specified user exists
    #
    if getent passwd "${1}" > /dev/null; then
        user="${1}"
    else
        _Usage
        echo "FATAL: user ${1} does not exist."
        exit 1
    fi
fi

#
# List details for user.
#
echo "${SEP_DOUBLE}"
echo "Basic account details for ${user}:"
echo "${SEP_SINGLE}"
#
# Get basic details from passwd.
#
getent_result="$(getent passwd "${user}" | cut -d ':' -s -f 1,3,5,6,7)"
IFS=':' read -ra user_info <<< "${getent_result}"
if [[ "${#user_info[@]:0}" -eq 5 ]]; then
    printf "${basic_format}" 'User'  "${user_info[0]}"
    printf "${basic_format}" 'UID'   "${user_info[1]}"
    printf "${basic_format}" 'Home'  "${user_info[3]}"
    printf "${basic_format}" 'Shell' "${user_info[4]}"
    printf "${basic_format}" 'Mail'  "${user_info[2]}"
else
    echo "FATAL: cannot parse getent output."
fi
echo "${SEP_SINGLE}"
#
# Get primary group.
#
primary_group="$(id -gn "${user}")"
primary_GID="$(id -g "${user}")"
#
# Get secondary groups.
#
id_result="$(id -Gn "${user}" | tr ' ' '\n' | sort)"
readarray -t secondary_groups <<< "${id_result}"
#
# Determine length of longest group for formatting.
#
declare -a all_groups=("${primary_group}" "${secondary_groups[@]}")
longest_group_length=0
for group in "${all_groups[@]:-}"; do
    if [[ "${#group}" -gt "${longest_group_length}" ]]; then
        longest_group_length="${#group}"
    fi
done
group_format="%-16s: %-${longest_group_length}s  (%d)\n"
#
# List groups.
#
echo "User ${user} is authorized for access to groups:"
echo "${SEP_SINGLE}"
printf "${group_format}" 'Primary group' "${primary_group}" "${primary_GID}";
for secondary_group in "${secondary_groups[@]:-}"; do
    if [[ "${secondary_group}" == "${primary_group}" ]]; then
        continue
    else
        secondary_GID="$(getent group "${secondary_group}" | cut -d ':' -s -f 3)"
        printf "${group_format}" 'Secondary group' "${secondary_group}" "${secondary_GID}"
    fi
done
echo "${SEP_SINGLE}"
#
# Authentication.
#
echo "Public key(s) for user ${user}:"
echo "${SEP_SINGLE}"
if [[ -e '/usr/libexec/openssh/get_public_keys_from_ldap.bash' ]]; then
    public_keys="$(/usr/libexec/openssh/get_public_keys_from_ldap.bash "${user}")"
elif [[ -e '/usr/libexec/openssh/ssh-ldap-helper' ]]; then
    public_keys="$(/usr/libexec/openssh/ssh-ldap-helper -s "${user}")"
else
    echo 'ERROR: Cannot fetch public keys from an LDAP.'
    echo '       Cannot find /usr/libexec/openssh/get_public_keys_from_ldap.bash nor /usr/libexec/openssh/ssh-ldap-helper'
fi
echo "${public_keys}"
echo "${SEP_DOUBLE}"