#!/bin/bash
# shellcheck disable=SC2004,SC2059
#
##
### Environment and bash sanity.
##
#
set -u
set -e
set -o pipefail
umask 0027
memyselfandi="$(basename "${0}")"
if [[ "${BASH_VERSINFO[0]}" -lt 4 ]]; then
	echo "Sorry, you need at least bash 4.x to use ${memyselfandi}." >&2
	exit 1
fi

set +e
SSH_LDAP_HELPER="$(command -v 'ssh-ldap-helper' 2>/dev/null)"
set -e
SSH_LDAP_HELPER="${SSH_LDAP_HELPER:-/usr/libexec/openssh/ssh-ldap-helper}"
if [[ ! -x "${SSH_LDAP_HELPER:-}" ]]; then
	echo "WARN: Cannot find ssh-ldap-helper, which is required to determine if users are (in)active."
fi

#
# These are currently hard-coded values.
# The LDAP connection details can be fetched from the ldap_config_file,
# but there is no easy way to get the specifics of the LDAP schema from the ldap_config_file :(
#
declare ldap_config_file='/etc/ssh/ldap.conf'
#
# For eDirectory.
#
declare ldap_group_object_class='groupofnames'
declare ldap_group_owner_attr='ruggroupOwnerValue'
declare ldap_group_datamanager_attr='ruggroupDataManagerValue'
declare ldap_user_object_class='person'
declare ldap_user_expiration_attr='loginexpirationtime'
declare ldap_user_expiration_regex='^'"${ldap_user_expiration_attr}"': ([0-9]{4})([0-9]{2})([0-9]{2}).+Z$'
#
# For OpenLDAP.
#
#declare ldap_group_object_class='posixGroup'
#declare ldap_group_owner_attr='groupOwnerUid'
#declare ldap_group_datamanager_attr='groupDataManager'
#declare ldap_user_object_class='inetOrgPerson'
#declare ldap_user_expiration_attr='loginexpirationtime'
#declare ldap_user_expiration_regex='^'"${ldap_user_expiration_attr}"': ([0-9]{4})([0-9]{2})([0-9]{2}).+Z$'

#
##
### Functions.
##
#

function _Usage() {
	echo
	printf '%s\n' 'Usage:'
	printf '%s\n' "       ${memyselfandi} will list by default all members of all groups you are a member of."
	printf '%s\n' "       ${memyselfandi} will sort group members on account name by default."
	echo
	printf '%s\n' 'Options:'
	printf '%s\n' '       -e          Sort group members by expiration date of their account as opposed to by account name.'
	printf '%s\n' '       -g all      Lists members of all groups including the ones you are not a member of.'
	printf '%s\n' '       -g GROUP    Lists members of the specified group GROUP.'
	printf '%s\n' '       -p          Plain text output: Disables coloring and other formatting using shell escape codes.'
	printf '%s\n' '                   Useful when redirecting the output to a log file.'
	echo
	printf '%s\n' 'Output format contains 3 columns:'
	printf '%s\n' '       1. Account name.'
	printf '%s\n' '       2. Account expiration date in format YYYY-MM-DD or "Never".'
	printf '%s\n' "       3. User's real name and email address in format: GivenName FamilyName <email-address>"
	printf '%s\n' '          This field may be suffixed with "(Inactive)" if a user has no available authentication methods'
	printf '%s\n' "          on the machine where the '${memyselfandi}' command is executed."
	printf '%s\n' "          This will happen when no authentication methods (e.g. password, public key, etc.)"
	printf '%s\n' "          are configured for a user's account or if the account has expired."
	echo
}

#
# Gets username, return enddate useraccount.
#
function _GetLoginExpirationTimes() {
	if [[ "${plain_text}" -eq 0 ]]; then
		#
		# If plain text output is disabled, show process indicator using dots.
		#
		printf '%s' 'Querying LDAP'
	fi
	local _user
	for _user in "${!users[@]}"; do
		if [[ "${users["${_user}"]}" == 'NA' ]]; then
			local _login_expiration_time='9999-99-99'
			local _query_result
			local _line
			_query_result=$(ldapsearch -LLL -o ldif-wrap=no \
					-H "${LDAP_HOST}" \
					-D "${LDAP_USER}" \
					-w "${LDAP_PASS}" \
					-b "${LDAP_SEARCH_BASE}" \
					"(&(ObjectClass=${ldap_user_object_class})(cn:dn:=${_user}))" \
					"${ldap_user_expiration_attr}"
				)
			while read -r _line; do
				if [[ "${_line}" =~ ${ldap_user_expiration_regex} ]]; then
					_login_expiration_time="${BASH_REMATCH[1]}-${BASH_REMATCH[2]}-${BASH_REMATCH[3]}"
				fi
			done < <( printf '%s\n' "${_query_result}")
			users["${_user}"]="${_login_expiration_time}"
			if [[ "${plain_text}" -eq 0 ]]; then
				printf '%s' '.' # Process indicator.
			fi
		fi
	done
	if [[ "${plain_text}" -eq 0 ]]; then
		printf '\n'
	fi
}

#
# Sorts user hashmap on date.
#
function _SortGroupMembersByDate() {
	declare -a _accounts=("${@}")
	declare -A _hashmap
	#
	# Get login expiration dates from global ${users[@]} hash
	# and store in temporary hash ${_hashmap[@]} for sorting.
	#
	for _account in "${_accounts[@]}"; do
		_hashmap["${_account}"]="${users[${_account}]}"
	done
	#
	# Sort hashMap and store sorted users in array ${sorted_keys[@]}.
	#
	readarray -t group_members_sorted_by_exp_date < <(
		for _user in "${!_hashmap[@]}"; do
			printf '%s:%s\n' "${_user}" "${_hashmap[${_user}]}"
		done | sort -t ':' -k 2V | sed 's/:.*//'
	)
	unset IFS; set +f
}

function _PrintGroupInfo() {
	echo "${SEP_DOUBLE}"
	group_header="Colleagues in the ${group} group:${PADDING:${#group}}"
	printf "${group_header_format}" "${group_header}"
	echo "${SEP_DOUBLE}"
	#
	# List owners.
	#
	printf "${role_header_format}" "${group} owner(s):"
	echo "${SEP_SINGLE}"
	for owner in "${owners[@]:-}"; do
		_PrintUserInfo "${owner}" "${body_format}"
	done
	echo "${SEP_DOUBLE}"
	#
	# List data managers.
	#
	printf "${role_header_format}" "${group} data manager(s):"
	echo "${SEP_SINGLE}"
	for dm in "${dms[@]:-}"; do
		_PrintUserInfo "${dm}" "${body_format}"
	done
	echo "${SEP_DOUBLE}"
	#
	# List regular members.
	#
	printf "${role_header_format}" "${group} member(s):"
	echo "${SEP_SINGLE}"
	for member in "${members[@]:-}"; do
		_PrintUserInfo "${member}" "${body_format}"
	done
	echo "${SEP_DOUBLE}"
}

function _PrintUserInfo() {
	local _user="${1}"
	local _format="${2}"
	local _login_expiration_time="${users["${_user}"]}"
	local _gecos
	local _getent_result
	getent_result="$(getent passwd "${_user}" | cut -d ':' -s -f 1,5)"
	IFS=':' read -r -a _user_info <<< "${getent_result}"
	if [[ "${_login_expiration_time}" == '9999-99-99' || "${_login_expiration_time}" == 'NA' ]]; then
		_login_expiration_time='Never'
	fi
	if [[ "${#_user_info[@]:0}" -ge 1 ]]; then
		local _public_key
		_public_key="$(${SSH_LDAP_HELPER} -s "${_user}")"
		if [[ -n "${_public_key}" ]]; then
			_gecos="${_user_info[1]:-NA}"
		else
			if [[ "${plain_text}" -eq 1 ]]; then
				_gecos="${_user_info[1]:-NA} (Inactive)"
			else
				_gecos="\e[2m${_user_info[1]:-NA} (Inactive)\e[22m"
			fi
		fi
	else
		if [[ ${_user} == 'MIA' || ${_user} == 'NA' ]]; then
			_user='MIA'
			if [[ "${plain_text}" -eq 1 ]]; then
				_gecos='Missing In Action.'
			else
				_gecos='\e[2mMissing In Action.\e[22m'
			fi
		else
			if [[ "${plain_text}" -eq 1 ]]; then
				_gecos='No details available (Not entitled to use this server/machine).'
			else
				_gecos='\e[2mNo details available (Not entitled to use this server/machine).\e[22m'
			fi
		fi
	fi
	printf "${_format}" "${_user}" "${_login_expiration_time}" "${_gecos}";
}

#
##
### Main.
##
#

declare -a groups=()
declare -a group_members_sorted_by_exp_date=()
total_width=110
base_header_length=25
SEP_SINGLE_CHAR='-'
SEP_DOUBLE_CHAR='='
SEP_SINGLE=$(head -c "${total_width}" /dev/zero | tr '\0' "${SEP_SINGLE_CHAR}")
SEP_DOUBLE=$(head -c "${total_width}" /dev/zero | tr '\0' "${SEP_DOUBLE_CHAR}")
PADDING=$(head -c $((${total_width}-${base_header_length})) /dev/zero | tr '\0' ' ')

#
# Get commandline arguments.
#
sort_by='account'
plain_text=0
while getopts "g:ehp" opt; do
	case "${opt}" in
		e)
			sort_by='login_expiration_date'
			;;
		h)
			_Usage
			exit
			;;
		p)
			plain_text=1
			;;
		g)
			group="${OPTARG}"
			;;
		\?)
			log4Bash "${LINENO}" "${FUNCNAME:-main}" '1' "Invalid option -${OPTARG}. Try \"${memyselfandi} -h\" for help."
			;;
		:)
			log4Bash "${LINENO}" "${FUNCNAME:-main}" '1' "Option -${OPTARG} requires an argument. Try \"${memyselfandi} -h\" for help."
			;;
		*)
			log4Bash "${LINENO}" "${FUNCNAME:-main}" '1' "Invalid option \"-${OPTARG}\". Try \"${memyselfandi} -h\" for help."
			;;
		esac
done

#
# Configure formatting.
#
body_format="%-25b %-17b %-70b\n"
if [[ "${plain_text}" -eq 1 ]]; then
	group_header_format="%-${total_width}b\n"
	role_header_format="%-${total_width}b\n"
else
	group_header_format="\e[7m%-${total_width}b\e[27m\n"
	role_header_format="\e[1m%-${total_width}b\e[22m\n"
fi

#
# Compile list of groups.
#
if [[ -z "${group:-}" ]]; then
	#
	# Get all groups of the current user.
	#
	id_result="$(id -Gn | tr ' ' '\n' | sort | tr '\n' ' ')"
	IFS=' ' read -r -a groups <<< "${id_result}"
else
	if [[ ${group} == 'all' ]]; then
		#
		# List all groups with group folders on this server.
		#
		find_result="$(find '/groups/' -mindepth 1 -maxdepth 1 -type d | grep -o '[^/]*$' | sort | tr '\n' ' ')"
		IFS=' ' read -r -a groups <<< "${find_result}"
	else
		#
		# Check if specified group exists.
		#
		if getent group "${group}" > /dev/null; then
			groups=("${group}")
		else
			_Usage
			echo "ERROR: specified group ${group} does not exist."
			exit 1
		fi
	fi
fi

#
# Parse LDAP config file.
#
LDAP_HOST="$(awk '$1 == "uri" {print $2}' "${ldap_config_file}")"
LDAP_USER="$(awk '$1 == "binddn" {print $2}' "${ldap_config_file}")"
LDAP_PASS="$(awk '$1 == "bindpw" {print $2}' "${ldap_config_file}")"
LDAP_SEARCH_BASE="$(awk '$1 == "base" {print $2}' "${ldap_config_file}")"

#
# List owners, data managers and members per group.
#
declare -A users
for group in "${groups[@]}"; do
	if [[ "${group}" == "${USER}" ]]; then
		#
		# Skip private group.
		#
		continue
	fi
	#
	# Fetch owner(s), data manager(s), and (regular) members.
	#  * either from a (sub) group (preferred)
	#     * "${group}-owners" sub group for group owners.
	#     * "${group}-dms" sub group for data managers.
	#     * "${group}" for regular group members.
	#  * or from a group's LDAP attribute (deprecated).
	#
	declare -a owners=('MIA')
	declare -a dms=('MIA')
	declare -a members=('MIA')
	declare query_result
	#
	# Get group owners.
	#
	if getent group "${group}-owners" | grep -q "."; then
		query_result="$(getent group "${group}-owners" \
			| sed 's/.*://' \
			| tr ',' '\n' \
			| sort
		)"
		if [[ -n "${query_result:-}" ]]; then
			readarray -t owners <<< "${query_result}"
		fi
	else
		query_result=$(ldapsearch -LLL -o ldif-wrap=no \
				-H "${LDAP_HOST}" \
				-D "${LDAP_USER}" \
				-w "${LDAP_PASS}" \
				-b "${LDAP_SEARCH_BASE}" \
				"(&(ObjectClass=${ldap_group_object_class})(cn:dn:=${group}))" \
				"${ldap_group_owner_attr}" \
			| grep "${ldap_group_owner_attr}" \
			| sed "s/${ldap_group_owner_attr}: //" \
			| sort
		)
		if [[ -n "${query_result:-}" ]]; then
			readarray -t owners <<< "${query_result}"
		fi
	fi
	#
	# Get data managers for this group.
	#
	if getent group "${group}-dms" | grep -q "."; then
		query_result="$(getent group "${group}-dms" \
				| sed 's/.*://' \
				| tr ',' '\n' \
				| sort
		)"
		if [[ -n "${query_result:-}" ]]; then
			readarray -t dms <<< "${query_result}"
		fi
	else
		query_result=$(ldapsearch -LLL -o ldif-wrap=no \
				-H "${LDAP_HOST}" \
				-D "${LDAP_USER}" \
				-w "${LDAP_PASS}" \
				-b "${LDAP_SEARCH_BASE}" \
				"(&(ObjectClass=${ldap_group_object_class})(cn:dn:=${group}))" \
				"${ldap_group_datamanager_attr}" \
			| grep "${ldap_group_datamanager_attr}" \
			| sed "s/${ldap_group_datamanager_attr}: //" \
			| sort
		)
		if [[ -n "${query_result:-}" ]]; then
			readarray -t dms <<< "${query_result}"
		fi
	fi
	#
	# Get regular members.
	#
	query_result="$(getent group "${group}" | sed 's/.*://' | tr ',' '\n' | sort)"
	if [[ -n "${query_result:-}" ]]; then
		readarray -t members <<< "${query_result}"
	fi
	#
	# Append all accounts to non-redundant users hash.
	#
	for user in "${owners[@]:-}" "${dms[@]:-}" "${members[@]:-}"; do
		if [[ -n "${user}" && -z "${users["${user}"]:-}" ]]; then
			users["${user}"]='NA'
		fi
	done
	#
	# Get login expiration for all users.
	#
	_GetLoginExpirationTimes
	#
	# Sort results. (Default is by account name.)
	#
	if [[ "${sort_by}" == 'login_expiration_date' ]]; then
		_SortGroupMembersByDate "${owners[@]:-}"
		owners=("${group_members_sorted_by_exp_date[@]:-}")
		_SortGroupMembersByDate "${dms[@]:-}"
		dms=("${group_members_sorted_by_exp_date[@]:-}")
		_SortGroupMembersByDate "${members[@]:-}"
		members=("${group_members_sorted_by_exp_date[@]:-}")
	fi
	#
	# Format and print result.
	#
	_PrintGroupInfo
done

